$primary-color: #ff9933;
$primary-color-100: #ff8a14;
$primary-color-200: #f57a00;
$primary-color-300: #d66b00;
$primary-color-400: #b85c00;
$primary-color-500: #9c4c00;
$primary-color-600: #7a3d00;
$primary-color-700: #5c2e00;
$primary-color-800: #3d1f00;
$primary-color-900: #1f0f00;
$white-color: #fff;
$black-color: #000;

$media_queries : (
    'small-mobile' : unquote("only screen and (max-width: 576px)"),
    'mobile' : unquote("only screen and (min-width: 577px) and (max-width: 768px)"),
    'tablet' : unquote("only screen and (min-width: 769px) and (max-width: 992px)"),
    'desktop' : unquote("only screen and (min-width: 993px) and (max-width: 1200px)"),
    'big-screen' : unquote("only screen and (min-width: 1201px) and (max-width: 1400px)"),
    'giant-screen' : unquote("only screen and (min-width: 1401px)"),
    'retina2' : unquote("only screen and (-webkit-min-device-pixel-ratio: 2) and (min-resolution: 192dpi)"),
    'retina3' : unquote("only screen and (-webkit-min-device-pixel-ratio: 3) and (min-resolution: 288dpi)"),
    'landscape' : unquote("screen and (orientation:landscape)"),
    'portrait' : unquote("screen and (orientation:portrait)"));

@mixin for_breakpoint($breakpoints) {
    $conditions : ();

    @each $breakpoint in $breakpoints {
        $conditions: append($conditions,
                #{inspect(map-get($media_queries, $breakpoint))},
                comma);
    }

    @media #{$conditions} {
        @content;
    }

}

* {
    padding: 0;
    margin: 0;
    line-height: 1.5rem;
}

html,
body {
    color: $white-color;
    background: $black-color;
    height: 100vh;
    width: 100vw;
    overflow: hidden !important;
}